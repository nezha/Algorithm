package com.nezha.ArtConcurrentBook.chapter08;import java.util.concurrent.*;/** * @author tengfei.fangtf * @version $Id: SemaphoreTest.java, v 0.1 2015-8-1 ����12:10:19 tengfei.fangtf Exp $ */public class SemaphoreTest {    private static final int THREAD_COUNT = 30;    private static ExecutorService threadPool = Executors.newFixedThreadPool(THREAD_COUNT);    private static CountDownLatch count = new CountDownLatch(1);    private static Semaphore s = new Semaphore(10);    public static void main(String[] args) {        for (int i = 0; i < THREAD_COUNT; i++) {            threadPool.execute(new Runnable() {                public void run() {                    try {                        count.await();                        s.acquire();                        System.out.println("save data "+s.getQueueLength());                        s.release();                    } catch (InterruptedException e) {                    }                }            });        }        try {            TimeUnit.SECONDS.sleep(2);        } catch (InterruptedException e) {            try {                e.printStackTrace();            } catch (Exception e1) {                e1.printStackTrace();            }        }        count.countDown();        threadPool.shutdown();    }}